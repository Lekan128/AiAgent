package io.github.lekan128.aiagent.api.llm;

import com.google.genai.Client;
import com.google.genai.types.GenerateContentResponse;
import io.github.cdimascio.dotenv.Dotenv;

/**
 * Provides a concrete implementation of the {@link LLM} contract for Google's Gemini models.
 *
 * <p>This class initializes the connection using the API key loaded from the **GEMINI_API_KEY**
 * environment variable (typically via a {@code .env} file and the Dotenv library, which is
 * expected to be managed by the implementation). It defaults to calling the gemini-2.5-flash model.</p>
 *
 * @author Olalekan
 * @since 1.0.0
 * @see LLM
 */
public class Gemini extends LLM {

    /**
     * Gets the standard name for this LLM implementation, which is "Gemini".
     *
     * @return The string "Gemini".
     */
    @Override
    public String getModelName() {
        return "Gemini";
    }

    /**
     * Executes an API call to the Gemini service using the provided prompt.
     *
     * <p>The method performs the following steps:</p>
     * <ol>
     * <li>Loads the API key from the environment/{@code .env} file.</li>
     * <li>Initializes the {@code Client}.</li>
     * <li>Calls the {@code gemini-2.5-flash} model with the input prompt.</li>
     * <li>Extracts and returns only the text content from the response.</li>
     * </ol>
     * <p>The method assumes external libraries (e.g., Dotenv, Google's client library) are configured.</p>
     *
     * @param prompt The complete, structured prompt generated by the Agent.
     * @return The plain text response from the Gemini model.
     * @throws RuntimeException If the API key is missing or the API call fails. (Note:
     * The actual exceptions are likely wrapped by the specific LLM client library).
     */
    @Override
    public String call(String prompt){
        Dotenv dotenv = Dotenv.load(); // Loads variables from .env in the current directory
        GenerateContentResponse generateContentResponse;

        try (Client client = Client.builder().apiKey(dotenv.get("GEMINI_API_KEY")).build()) {
            generateContentResponse = client.models.generateContent(
                    "gemini-2.5-flash",
                    prompt,
                    null);
        }
        return generateContentResponse.text();
    }
}

